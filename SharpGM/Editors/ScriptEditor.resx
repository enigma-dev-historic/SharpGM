<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="scintilla1.Text" xml:space="preserve">
    <value>/** Copyright (C) 2013 Robert B. Colton
***
*** This file is a part of the ENIGMA Development Environment.
***
*** ENIGMA is free software: you can redistribute it and/or modify it under the
*** terms of the GNU General Public License as published by the Free Software
*** Foundation, version 3 of the license or any later version.
***
*** This application and its source code is distributed AS-IS, WITHOUT ANY
*** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
*** FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
*** details.
***
*** You should have received a copy of the GNU General Public License along
*** with this code. If not, see &lt;http://www.gnu.org/licenses/&gt;
**/

#include &lt;cmath&gt;
#include &lt;cstdlib&gt;
#include &lt;string&gt;
using std::string;

#include "Direct3D9Headers.h"
#include "../General/GSsprite.h"
#include "../General/GStextures.h"
#include "DX9binding.h"

#include "Universal_System/spritestruct.h"
#include "Universal_System/instance_system.h"
#include "Universal_System/graphics_object.h"

#define __GETR(x) ((x &amp; 0x0000FF))
#define __GETG(x) ((x &amp; 0x00FF00) &gt;&gt; 8)
#define __GETB(x) ((x &amp; 0xFF0000) &gt;&gt; 16)


#ifdef DEBUG_MODE
  #include "libEGMstd.h"
  #include "Widget_Systems/widgets_mandatory.h"
  #define get_sprite(spr,id,r) \
    if (id &lt; -1 or size_t(id) &gt; enigma::sprite_idmax or !enigma::spritestructarray[id]) { \
      show_error("Cannot access sprite with id " + toString(id), false); \
      return r; \
    } const enigma::sprite *const spr = enigma::spritestructarray[id];
  #define get_spritev(spr,id) \
    if (id &lt; -1 or size_t(id) &gt; enigma::sprite_idmax or !enigma::spritestructarray[id]) { \
      show_error("Cannot access sprite with id " + toString(id), false); \
      return; \
    } const enigma::sprite *const spr = enigma::spritestructarray[id];
  #define get_sprite_null(spr,id,r) \
    if (id &lt; -1 or size_t(id) &gt; enigma::sprite_idmax) { \
      show_error("Cannot access sprite with id " + toString(id), false); \
      return r; \
    } const enigma::sprite *const spr = enigma::spritestructarray[id];
#else
  #define get_sprite(spr,id,r) \
    const enigma::sprite *const spr = enigma::spritestructarray[id];
  #define get_spritev(spr,id) \
    const enigma::sprite *const spr = enigma::spritestructarray[id];
  #define get_sprite_null(spr,id,r) \
    const enigma::sprite *const spr = enigma::spritestructarray[id];
#endif

#include "Direct3D9Headers.h"
#include "Bridges/General/DX9Device.h"
#include "DX9TextureStruct.h"

namespace enigma_user
{

bool sprite_exists(int spr) {
    return (unsigned(spr) &lt; enigma::sprite_idmax) and bool(enigma::spritestructarray[spr]);
}

void draw_sprite(int spr,int subimg, gs_scalar x, gs_scalar y)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	D3DXVECTOR3 offset(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);
	D3DXVECTOR3 pos(x, y, 0);
	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, &amp;pos, 0xFFFFFFFF);
}

void draw_sprite_stretched(int spr, int subimg, gs_scalar x, gs_scalar y, gs_scalar width, gs_scalar height)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	const float texw = spr2d-&gt;width, texh = spr2d-&gt;height;

	// Build our matrix to rotate, scale and position our sprite
	D3DXMATRIX mat;
	
	// Screen position of the sprite
	D3DXVECTOR2 center = D3DXVECTOR2(spr2d-&gt;xoffset, spr2d-&gt;yoffset);
	// Screen position of the sprite
	D3DXVECTOR2 trans = D3DXVECTOR2(x, y);

	D3DXVECTOR2 scaling(width/texw, height/texh);

	// out, scaling centre, scaling rotation, scaling, rotation centre, rotation, translation
	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,&amp;scaling,&amp;center,0,&amp;trans);

	// Tell the sprite about the matrix
	dsprite-&gt;SetTransform(&amp;mat);

	// Screen position of the sprite
	D3DXVECTOR3 offset = D3DXVECTOR3(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);

	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, NULL, 0xFFFFFFFF);

	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,0,NULL,0,0);
	dsprite-&gt;SetTransform(&amp;mat);
}

void draw_sprite_part(int spr, int subimg, gs_scalar left, gs_scalar top, gs_scalar width, gs_scalar height, gs_scalar x, gs_scalar y)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	D3DXVECTOR3 pos(x, y, 0);
	tagRECT rect;
	rect.left = left; rect.top = top; rect.right = left + width; rect.bottom = top + height;
	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, &amp;rect, 0, &amp;pos, 0xFFFFFFFF);
}

void draw_sprite_part_offset(int spr, int subimg, gs_scalar left, gs_scalar top, gs_scalar width, gs_scalar height, gs_scalar x, gs_scalar y)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	D3DXVECTOR3 offset(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);
	D3DXVECTOR3 pos(x, y, 0);
	tagRECT rect;
	rect.left = left; rect.top = top; rect.right = left + width; rect.bottom = top + height;
	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, &amp;rect, &amp;offset, &amp;pos, 0xFFFFFFFF);
}

void draw_sprite_ext(int spr, int subimg, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, double rot, int color, gs_scalar alpha)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	// Build our matrix to rotate, scale and position our sprite
	D3DXMATRIX mat;
	
	// Screen position of the sprite
	D3DXVECTOR2 center = D3DXVECTOR2(spr2d-&gt;xoffset, spr2d-&gt;yoffset);
	// Screen position of the sprite
	D3DXVECTOR2 trans = D3DXVECTOR2(x, y);

	D3DXVECTOR2 scaling(xscale, yscale);

	// out, scaling centre, scaling rotation, scaling, rotation centre, rotation, translation
	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,&amp;scaling,&amp;center,rot,&amp;trans);

	// Tell the sprite about the matrix
	dsprite-&gt;SetTransform(&amp;mat);

	// Screen position of the sprite
	D3DXVECTOR3 offset = D3DXVECTOR3(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);

	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, NULL,
		D3DCOLOR_ARGB(char(alpha*255), __GETR(color), __GETG(color), __GETB(color)));

	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,0,NULL,0,0);
	dsprite-&gt;SetTransform(&amp;mat);
}

void draw_sprite_part_ext(int spr, int subimg, gs_scalar left, gs_scalar top, gs_scalar width, gs_scalar height, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, int color, gs_scalar alpha)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	// Build our matrix to rotate, scale and position our sprite
	D3DXMATRIX mat;
	
	// Screen position of the sprite
	D3DXVECTOR2 trans = D3DXVECTOR2(x, y);

	D3DXVECTOR2 scaling(xscale, yscale);

	// out, scaling centre, scaling rotation, scaling, rotation centre, rotation, translation
	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,&amp;scaling,0,0,&amp;trans);

	// Tell the sprite about the matrix
	dsprite-&gt;SetTransform(&amp;mat);

	// Screen position of the sprite
	D3DXVECTOR3 offset = D3DXVECTOR3(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);

	tagRECT rect;
	rect.left = left; rect.top = top; rect.right = left + width; rect.bottom = top + height;

	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, NULL,
		D3DCOLOR_ARGB(char(alpha*255), __GETR(color), __GETG(color), __GETB(color)));
}

void draw_sprite_general(int spr, int subimg, gs_scalar left, gs_scalar top, gs_scalar width, gs_scalar height, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar a1, gs_scalar a2, gs_scalar a3, gs_scalar a4)
{

}

void draw_sprite_stretched_ext(int spr, int subimg, gs_scalar x, gs_scalar y, gs_scalar width, gs_scalar height, int color, gs_scalar alpha)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

	const float
    texw = spr2d-&gt;width, texh = spr2d-&gt;height;

	// Build our matrix to rotate, scale and position our sprite
	D3DXMATRIX mat;
	
	// Screen position of the sprite
	D3DXVECTOR2 center = D3DXVECTOR2(spr2d-&gt;xoffset, spr2d-&gt;yoffset);
	// Screen position of the sprite
	D3DXVECTOR2 trans = D3DXVECTOR2(x, y);

	D3DXVECTOR2 scaling(width/texw, height/texh);

	// out, scaling centre, scaling rotation, scaling, rotation centre, rotation, translation
	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,&amp;scaling,&amp;center,0,&amp;trans);

	// Screen position of the sprite
	D3DXVECTOR3 offset = D3DXVECTOR3(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);

	// Tell the sprite about the matrix
	dsprite-&gt;SetTransform(&amp;mat);

	dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, NULL,
		D3DCOLOR_ARGB(char(alpha*255), __GETR(color), __GETG(color), __GETB(color)));

	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,0,NULL,0,0);
	dsprite-&gt;SetTransform(&amp;mat);
}

}

// These two leave a bad taste in my mouth because they depend on views, which should be removable.
// However, for now, they stay.

#include &lt;string&gt;
using std::string;
#include "Universal_System/var4.h"
#include "Universal_System/roomsystem.h"

namespace enigma_user
{

void draw_sprite_tiled(int spr, int subimg, gs_scalar x, gs_scalar y)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

    const float
    tbx  = spr2d-&gt;texbordxarray[usi], tby  = spr2d-&gt;texbordyarray[usi],
    xoff = fmod(spr2d-&gt;xoffset+x,spr2d-&gt;width)-spr2d-&gt;width, yoff = fmod(spr2d-&gt;yoffset+y,spr2d-&gt;height)-spr2d-&gt;height;

    const int
    hortil = int(ceil((view_enabled ? int(view_xview[view_current] + view_wview[view_current]) : room_width) / (spr2d-&gt;width*tbx))) + 1,
    vertil = int(ceil((view_enabled ? int(view_yview[view_current] + view_hview[view_current]) : room_height) / (spr2d-&gt;height*tby))) + 1;

    float xvert1 = xoff, xvert2 = xvert1 + spr2d-&gt;width, yvert1, yvert2;
    for (int i=0; i&lt;hortil; i++)
    {
        yvert1 = yoff; yvert2 = yvert1 + spr2d-&gt;height;
        for (int c=0; c&lt;vertil; c++)
        {
			D3DXVECTOR3 offset(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);
			D3DXVECTOR3 pos(xvert1, yvert1, 0);
			dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, &amp;pos, 0xFFFFFFFF);
			
            yvert1 = yvert2;
            yvert2 += spr2d-&gt;height;
        }
        xvert1 = xvert2;
        xvert2 += spr2d-&gt;width;
    }
}

void draw_sprite_tiled_ext(int spr, int subimg, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, int color, gs_scalar alpha)
{
    get_spritev(spr2d,spr);
    const int usi = subimg &gt;= 0 ? (subimg % spr2d-&gt;subcount) : int(((enigma::object_graphics*)enigma::instance_event_iterator-&gt;inst)-&gt;image_index) % spr2d-&gt;subcount;

    const float
    tbx  = spr2d-&gt;texbordxarray[usi], tby  = spr2d-&gt;texbordyarray[usi],
    width_scaled = spr2d-&gt;width*xscale, height_scaled = spr2d-&gt;height*yscale,
    xoff = fmod(spr2d-&gt;xoffset*xscale+x,width_scaled)-width_scaled, yoff = fmod(spr2d-&gt;yoffset*yscale+y,height_scaled)-height_scaled;

    const int
    hortil = int(ceil((view_enabled ? int(view_xview[view_current] + view_wview[view_current]) : room_width) / (width_scaled*tbx))) + 1,
    vertil = int(ceil((view_enabled ? int(view_yview[view_current] + view_hview[view_current]) : room_height) / (height_scaled*tby))) + 1;

    float xvert1 = xoff, xvert2 = xvert1 + width_scaled, yvert1, yvert2;
	
	// Build our matrix to rotate, scale and position our sprite
	D3DXMATRIX mat;
			
    for (int i=0; i&lt;hortil; i++)
    {
        yvert1 = yoff; yvert2 = yvert1 + height_scaled;
        for (int c=0; c&lt;vertil; c++)
        {
			// Screen position of the sprite
			D3DXVECTOR2 center = D3DXVECTOR2(spr2d-&gt;xoffset, spr2d-&gt;yoffset);
			// Screen position of the sprite
			D3DXVECTOR2 trans = D3DXVECTOR2(xvert1, yvert1);

			D3DXVECTOR2 scaling(xscale, yscale);

			// out, scaling centre, scaling rotation, scaling, rotation centre, rotation, translation
			D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,&amp;scaling,&amp;center,0,&amp;trans);

			// Screen position of the sprite
			D3DXVECTOR3 offset = D3DXVECTOR3(spr2d-&gt;xoffset, spr2d-&gt;yoffset, 0);

			dsprite-&gt;SetTransform(&amp;mat);
			
			dsprite-&gt;Draw(GmTextures[spr2d-&gt;texturearray[usi]]-&gt;gTexture, NULL, &amp;offset, NULL,
				D3DCOLOR_ARGB(char(alpha*255), __GETR(color), __GETG(color), __GETB(color)));
			
            yvert1 = yvert2;
            yvert2 += height_scaled;
       }
       xvert1 = xvert2;
       xvert2 += width_scaled;
    }

	D3DXMatrixTransformation2D(&amp;mat,NULL,0.0,0,NULL,0,0);
	dsprite-&gt;SetTransform(&amp;mat);
}

}
</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>238, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButton5.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIISURBVDhPpZP7S1NxGMbPPxKaXVUkMEq8IpKUCoY/hGgI
        ymqkDYYXcCjDZOANURSjCNGFQUTsl4GXVMxKk62YU4fXQpaIlygHQxBRH8/zwvyaIAYe+HLgnPN8nue9
        HA3nvDTq63oW/jm13XOwvPTB3DYFY5MH+bXfcN8ygfTSMSSXfESicQDxBqdYHwH29g9w2tnZ3UcguIvN
        rR3417exuBJE5N1n/wfwLgXEOc38Bc6xNRHb+/y4nm49G0Bnit2zf9H6bkliE/jKuYxrd6oVgDWfjB+K
        TWeKMyrGEVfowITvD9re/9ABVQrAhh0HHK+ZselMMaN/mvwtDb+aVqkA7HYIwIj3ysfluPTorJnP6Ezx
        oHsD1s5ZXEktUwCOioB5f1CEPR9+wTG6iuiserTo8dkwng7HT/R+XUPF8xlcTjErAOdMcW6NW8STiwG8
        7vej8oUPN/PsEv3t8Ao0TZP3T1u8uJRkUgAuSYHtO97oLxmXd5t9Ho8aPTK+GzntqNfrLm2fFoihwYOI
        xGIF4KjoGBLzY1OrF9k6OOFxnwDC4wxIMX1G0pMhgVyMNyoA13PAtS7OrJk1PrC69LUdQWxuF6IybHrX
        LRI7JrtZdoDAo1XmbjMyD+tjSXxGcXRmnYg5ttD9QuxDhN0uUgDOmbvNTpPOJaGAo2K36cyaGZvOFIfd
        KlSA8/zRh9ABIDUG+1JpAAAAAElFTkSuQmCC
</value>
  </data>
</root>